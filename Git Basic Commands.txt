(*) git init -> very first command to initialize a LOCAL repository in the current directory. It creates the .git hidden file. If we can a remote repository to upload
		our changes, we will need to create it at GitHub, and then add that repository using #git remote add origin <URL>.git", you wil see later...
(*) git status -> check the current status of our projects. If we modify or create a new file, it's important to check the status of those files, so then we can add them
to start tracking their changes (git add <file>) to be commited (git commit -m "File added/modified").
---------------------------------------------------------
staged:
Files are ready to be committed.

unstaged:
Files with changes that have not been prepared to be committed.

untracked:
Files aren't tracked by Git yet. This usually indicates a newly created file.

deleted:
File has been deleted and is waiting to be removed from Git.
---------------------------------------------------------

(*) git add <file_name> -> start tracking changes made on the file (file goes into the staging area) so it can then be later commited and push. If we run "git status"
				again, file should be in the staging area waiting to be commited.
We can also use wildcard for adding all files at once (even it they are beneath current directory)
(*) git add '*.txt'
---------------------------------------------------------
add all:
You can also type git add -A . where the dot stands for the current directory, so everything in and beneath it is added. 
The -A ensures even file deletions are included.

git reset:
You can use git reset <filename> to remove a file or files from the staging area.
---------------------------------------------------------
Staging Area:
A place where we can group files together before we "commit" them to Git.

Commit
A "commit" is a snapshot of our repository. This way if we ever need to look back at the changes we've made (or if someone else does), we will see a nice timeline 
of all changes.
----------------------------------------------------------
(*) git commit -m "Added file to current respository"
(*) git log -> Tracks all the changes we've commited so far, in the order we committed them. (we can use --summary option to see more info for each commit)
(*) git remote add origin <URL>.git -> it add our remote GitHub repository in order to later push our local repo to the github server.

----------------------------------------------------------
git remote:
Git doesn't care what you name your remotes, but it's typical to name your main one origin.
----------------------------------------------------------

(*) git push -u origin master -> Once locally commited, we can push them to our remote repo. -u option tells git to remember the parameters 
				(in this case, origin remote and master repository), so next time we can simply run "git push" and git will know what to do.

----------------------------------------------------------
Cool Stuff:
When you start to get the hang of git you can do some really cool things with hooks when you push.

For example, you can upload directly to a webserver whenever you push to your master remote instead of having to upload your site with an ftp client.
Check it out here: http://git-scm.com/book/en/Customizing-Git-Git-Hooks
-----------------------------------------------------------

(*) git pull origin master -> check for changes in our github repository and pull down any new changes (it updates the local repo with remote repo).

-----------------------------------------------------------
git stash:
Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes.

Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.
-----------------------------------------------------------

(*) git diff HEAD-> It checks what is different from our last or most recent commit (by using HEAD option) vs the git pull. HEAD can be used as a quick way to 
			reference that last commit without having to look up the SHA.
-----------------------------------------------------------
Another great use for diff is looking at changes within files that have already been staged (by using: git add <file>). Remember, staged files are files we have
 told git that are ready to be committed.
-----------------------------------------------------------
(*) git diff --staged -> Checks changes we've just staged (by using: git add <file>) instead of changes between our last commit and the pull to the remote repo.
(*) git reset <file_name> -> Used to unstage files we have staged using the: git add <file> command. 
(*) git checkout -- <file_name> -> Files can be changed back to how they were at the last commit by using this command, where <file_name> is the target. Pretty much
					it gets rid of all the changes since the last commit for <file_name>. git checkout can also be used to switch between branches

-----------------------------------------------------------
The '--'
So you may be wondering, why do I have to use this '--' thing? git checkout seems to work fine without it. It's simply promising the command line that there are 
no more options after the '--'. This way if you happen to have a branch named octocat.txt, it will still revert the file, instead of switching to the branch of 
the same name.
------------------------------------------------------------
(*) git branch <branch_name> -> creates a copy (a snapshot really) of the master branch so we can work and commit without affecting the master. When we are done, 
				we can merge our changes back to master branch and push it to the remote server. 
(*) git checkout <branch_name> -> switch to <branch_name>. 
We can also use:
(*) git checkout -b <new_branch) to create a branch and switch to it at the same time. 
(*) git rm '*.txt' -> removes all the .txt files from disk and also stage the removal of files from us.	
(*) git rm -r <folder_name> -> removes recursively all files (including the folder) within a folder from disk, and also stage the removal.
(*) git status -> useful to run to check the changes we're about to commit.
(*) git commit -m "Remove all files from this newly created branch"

------------------------------------------------------------
If you happen to delete a file without using 'git rm' you'll find that you still have to 'git rm' the deleted files from the working tree. 
You can save this step by using the '-a' option on 'git commit', which auto removes deleted files with the commit.

git commit -am "Delete stuff"
------------------------------------------------------------
(*) git checkout master -> to switch to master branch so we can merge the changes from our other branch.

------------------------------------------------------------
Pull Requests

If you're hosting your repo on GitHub, you can do something called a pull request.

A pull request allows the boss of the project to look through your changes and make comments before deciding to merge in the change. 
It's a really great feature that is used all the time for remote workers and open-source projects.
-----------------------------------------------------------

(*) git merge <branch_name> -> If we are on the master branch and run this command, we are merging the changes made on <branch_name> to us (the master branch). 
				Careful when running it.
(*) git branch -d <branch_name> -> Once we have merged our changes to master branch, we no longer need this <branch_name>, so we can delete it.

-----------------------------------------------------------
Force delete

What if you have been working on a feature branch and you decide you really don't want this feature anymore? You might decide to delete the branch since you're 
scrapping the idea. You'll notice that git branch -d bad_feature doesn't work. This is because -d won't let you delete something that hasn't been merged.

You can either add the --force (-f) option or use -D which combines -d -f together into one command.
-----------------------------------------------------------
(*) git push -> once we've merged all created branches' changes to master branch, we can push it to our remote origin server branch.




A great online free course offered by Git to continue learning: http://gitreal.codeschool.com/?utm_source=github&utm_medium=codeschool_option&utm_campaign=trygit
-----------------------------------------------------------


When pulling the first time from a remote repo and is yours, you don't have to clone its contents. Simply do this:
> git init (on the Directory where filess will be pushed to)
> git remote add origin https://github.com/Sejopc/<Repo_name>.git
> git pull origin master

